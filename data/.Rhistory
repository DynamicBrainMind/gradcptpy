nrow(d)
sum(duplicated(d$trial))
sum(duplicated(coded_responded$trial))
sum(timeouts$trials %in% d$trials)
sum(duplicated(timeouts$trials))
d <- read.csv('sub-05_sess-2_task-GRADCPT_block-gonogo.csv')
# Check incoming data
stopifnot(is.data.frame(d))
# Get relevant data
temp <- get_columns(d)
trial <- temp$trial
condition <- temp$condition
coherence <- temp$coherence
rt <- temp$rt
within_trial <- c('transition_step', 'total_runtime_mins', 'frame_count', 'coherence', 'resp_key', 'rt')
# Separate out condition codes mapped on to trials
# Merge back in at the end
trial_condition <- d[, c('gradcpt_trial', 'condition')]
colnames(trial_condition)[1] <- 'trial'
trial_condition <- trial_condition[!duplicated(trial_condition$trial),]
if (! all(within_trial %in% colnames(d))) {
stop(paste0('The following columns need to be in the data: ', paste0(within_trial, collapse=', ')))
}
# Step 1 - Assign unambiguous responses
trialcode1 <- ifelse(rt == 0, 'timeout',
ifelse(coherence < unambig_low, lag(trial),
ifelse(coherence > unambig_high, trial, 'ambiguous')))
# Step 2 - Assign ambiguous responses
trialcode2 <- c()
for (row in 1:(length(rt))) {
# If current response assignment is unambiguous, leave it alone
if (trialcode1[row] != 'ambiguous') {
trialcode2 <- c(trialcode2, trialcode1[row])
# If current response assignment is ambiguous
} else if (trialcode1[row] == 'ambiguous') {
trial_id <- trial[row]
# Discern if the current and previous trials are already assigned a response
# To discern previous trial:
# If it's not the first iteration, look back to the
# last element in the currently created step 2 vector
if (length(trialcode2 > 2)) {
is_previous_response <- as.character(trial_id - 1) %in% trialcode2[row-1]
# Else, just look in the step 1 results
} else {
is_previous_response <- as.character(trial_id - 1) %in% trialcode1
}
# Discern whether current trial is assigned a response
is_current_response <- as.character(trial_id) %in% trialcode1
# If exactly one trial is assigned a response
if (xor(is_previous_response, is_current_response)) {
# Assign the current response to the trial that isn't already assigned
trialcode2 <- c(trialcode2, ifelse(is_previous_response, trial_id, trial_id-1))
# If neither current or previous trial is assigned a response
} else if (!is_previous_response & !is_current_response) {
# Assign it to the current trial only if current trial is not catch trial
trialcode2 <- c(trialcode2, ifelse(condition[row]=='nondom', trial_id - 1, trial_id))
# If both trials are already assigned, assign it as duplicate to
# current trial
} else{
trialcode2 <- c(trialcode2, trial_id)
}
}
} # End Step 2
# -- Step 3 - keep only first of duplicate responses --
# Format results from Step 2 as data frame
s2 <- cbind(data.frame(trial=trial), d[,colnames(d) %in% within_trial], trialcode2)
# Ensure trial column is named trial
colnames(d)[sapply(colnames(d), FUN=function(x) grepl('trial', x))] <- 'trial'
# Keep only non duplicate observations for within subject columns
coded_all <- s2 %>%
# Recode RTs assigned to previous trial to add 800 ms
mutate(new_rt = ifelse(trialcode2 == lag(trial) & trialcode2 != trial, .8+rt, rt),
# Identify duplicated trial assignments
dups = duplicated(trialcode2))
coded_responded <- coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
# Format columns
select(trialcode2, all_of(within_trial[within_trial != 'rt']), new_rt) %>%
rename(trial = trialcode2, rt = new_rt) %>%
mutate(trial = as.numeric(trial), rt = as.numeric(rt))
coded_timeouts <- coded_all %>%
# Keep all timeout trials whose trial ids are not in the set of responses
filter(trialcode2 == 'timeout', !trialcode2 %in% coded_responded$trial) %>%
select(-trialcode2, -new_rt, -dups)
# Extract all between subject information and merge it to response data
d <- d %>%
mutate(dups = duplicated(trial)) %>%
filter(!dups) %>%
# Need all within trial data plus condition from newly coded data
select(-all_of(within_trial), -condition, -dups) %>%
inner_join(coded_responded)
sum(duplicated(d$trial))
nrow(d)
nrow(timeouts)
nrow(d) + nrow(timeouts)
head(timeouts)
sum(duplicated(timeouts$trial))
temp <- c(d$trial, timeouts$trial)
length(temp)
head(sort(temp))
temp <- sort(temp)
plot(temp)
tail(temp)
sum(duplicated(temp))
sum(duplicated(sort(timeouts$trial)))
sum(duplicated(sort(d$trial)))
sum(timeouts$trial %in% d$trial)
head(coded_timeouts)
head(coded_all)
coded_timeouts <- coded_all %>%
# Keep all timeout trials whose trial ids are not in the set of responses
filter(trialcode2 == 'timeout', !trial %in% coded_responded$trial) %>%
select(-trialcode2, -new_rt, -dups)
d <- d %>%
mutate(dups = duplicated(trial)) %>%
filter(!dups) %>%
# Need all within trial data plus condition from newly coded data
select(-all_of(within_trial), -condition, -dups) %>%
inner_join(coded_responded)
# Add between subject data on to timeout data and append
timeouts <- coded_timeouts[, colnames(coded_timeouts) %in% c('trial', within_trial)]
timeouts <- cbind(d[1,!colnames(d) %in% c(within_trial, 'trial')], timeouts)
timeouts <- timeouts[, colnames(d)]
nrow(d) + nrow(timeouts)
d <- read.csv('sub-05_sess-2_task-GRADCPT_block-gonogo.csv')
# Check incoming data
stopifnot(is.data.frame(d))
# Get relevant data
temp <- get_columns(d)
trial <- temp$trial
condition <- temp$condition
coherence <- temp$coherence
rt <- temp$rt
within_trial <- c('transition_step', 'total_runtime_mins', 'frame_count', 'coherence', 'resp_key', 'rt')
# Separate out condition codes mapped on to trials
# Merge back in at the end
trial_condition <- d[, c('gradcpt_trial', 'condition')]
colnames(trial_condition)[1] <- 'trial'
trial_condition <- trial_condition[!duplicated(trial_condition$trial),]
if (! all(within_trial %in% colnames(d))) {
stop(paste0('The following columns need to be in the data: ', paste0(within_trial, collapse=', ')))
}
# Step 1 - Assign unambiguous responses
trialcode1 <- ifelse(rt == 0, 'timeout',
ifelse(coherence < unambig_low, lag(trial),
ifelse(coherence > unambig_high, trial, 'ambiguous')))
# Step 2 - Assign ambiguous responses
trialcode2 <- c()
for (row in 1:(length(rt))) {
# If current response assignment is unambiguous, leave it alone
if (trialcode1[row] != 'ambiguous') {
trialcode2 <- c(trialcode2, trialcode1[row])
# If current response assignment is ambiguous
} else if (trialcode1[row] == 'ambiguous') {
trial_id <- trial[row]
# Discern if the current and previous trials are already assigned a response
# To discern previous trial:
# If it's not the first iteration, look back to the
# last element in the currently created step 2 vector
if (length(trialcode2 > 2)) {
is_previous_response <- as.character(trial_id - 1) %in% trialcode2[row-1]
# Else, just look in the step 1 results
} else {
is_previous_response <- as.character(trial_id - 1) %in% trialcode1
}
# Discern whether current trial is assigned a response
is_current_response <- as.character(trial_id) %in% trialcode1
# If exactly one trial is assigned a response
if (xor(is_previous_response, is_current_response)) {
# Assign the current response to the trial that isn't already assigned
trialcode2 <- c(trialcode2, ifelse(is_previous_response, trial_id, trial_id-1))
# If neither current or previous trial is assigned a response
} else if (!is_previous_response & !is_current_response) {
# Assign it to the current trial only if current trial is not catch trial
trialcode2 <- c(trialcode2, ifelse(condition[row]=='nondom', trial_id - 1, trial_id))
# If both trials are already assigned, assign it as duplicate to
# current trial
} else{
trialcode2 <- c(trialcode2, trial_id)
}
}
} # End Step 2
# -- Step 3 - keep only first of duplicate responses --
# Format results from Step 2 as data frame
s2 <- cbind(data.frame(trial=trial), d[,colnames(d) %in% within_trial], trialcode2)
# Ensure trial column is named trial
colnames(d)[sapply(colnames(d), FUN=function(x) grepl('trial', x))] <- 'trial'
# Keep only non duplicate observations for within subject columns
coded_all <- s2 %>%
# Recode RTs assigned to previous trial to add 800 ms
mutate(new_rt = ifelse(trialcode2 == lag(trial) & trialcode2 != trial, .8+rt, rt),
# Identify duplicated trial assignments
dups = duplicated(trialcode2))
coded_responded <- coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
# Format columns
select(trialcode2, all_of(within_trial[within_trial != 'rt']), new_rt) %>%
rename(trial = trialcode2, rt = new_rt) %>%
mutate(trial = as.numeric(trial), rt = as.numeric(rt))
coded_timeouts <- coded_all %>%
# Keep all timeout trials whose trial ids are not in the set of responses
filter(trialcode2 == 'timeout', !trial %in% coded_responded$trial) %>%
select(-trialcode2, -new_rt, -dups)
# Extract all between subject information and merge it to response data
d <- d %>%
mutate(dups = duplicated(trial)) %>%
filter(!dups) %>%
# Need all within trial data plus condition from newly coded data
select(-all_of(within_trial), -condition, -dups) %>%
inner_join(coded_responded)
# Add between subject data on to timeout data and append
timeouts <- coded_timeouts[, colnames(coded_timeouts) %in% c('trial', within_trial)]
timeouts <- cbind(d[1,!colnames(d) %in% c(within_trial, 'trial')], timeouts)
timeouts <- timeouts[, colnames(d)]
d <- rbind(d, timeouts)
d <- d[order(d$trial),]
nrow(d)
head(timeouts)
20 %in% d$trial
d <- read.csv('sub-05_sess-2_task-GRADCPT_block-gonogo.csv')
# Check incoming data
stopifnot(is.data.frame(d))
# Get relevant data
temp <- get_columns(d)
trial <- temp$trial
condition <- temp$condition
coherence <- temp$coherence
rt <- temp$rt
within_trial <- c('transition_step', 'total_runtime_mins', 'frame_count', 'coherence', 'resp_key', 'rt')
# Separate out condition codes mapped on to trials
# Merge back in at the end
trial_condition <- d[, c('gradcpt_trial', 'condition')]
colnames(trial_condition)[1] <- 'trial'
trial_condition <- trial_condition[!duplicated(trial_condition$trial),]
if (! all(within_trial %in% colnames(d))) {
stop(paste0('The following columns need to be in the data: ', paste0(within_trial, collapse=', ')))
}
# Step 1 - Assign unambiguous responses
trialcode1 <- ifelse(rt == 0, 'timeout',
ifelse(coherence < unambig_low, lag(trial),
ifelse(coherence > unambig_high, trial, 'ambiguous')))
# Step 2 - Assign ambiguous responses
trialcode2 <- c()
for (row in 1:(length(rt))) {
# If current response assignment is unambiguous, leave it alone
if (trialcode1[row] != 'ambiguous') {
trialcode2 <- c(trialcode2, trialcode1[row])
# If current response assignment is ambiguous
} else if (trialcode1[row] == 'ambiguous') {
trial_id <- trial[row]
# Discern if the current and previous trials are already assigned a response
# To discern previous trial:
# If it's not the first iteration, look back to the
# last element in the currently created step 2 vector
if (length(trialcode2 > 2)) {
is_previous_response <- as.character(trial_id - 1) %in% trialcode2[row-1]
# Else, just look in the step 1 results
} else {
is_previous_response <- as.character(trial_id - 1) %in% trialcode1
}
# Discern whether current trial is assigned a response
is_current_response <- as.character(trial_id) %in% trialcode1
# If exactly one trial is assigned a response
if (xor(is_previous_response, is_current_response)) {
# Assign the current response to the trial that isn't already assigned
trialcode2 <- c(trialcode2, ifelse(is_previous_response, trial_id, trial_id-1))
# If neither current or previous trial is assigned a response
} else if (!is_previous_response & !is_current_response) {
# Assign it to the current trial only if current trial is not catch trial
trialcode2 <- c(trialcode2, ifelse(condition[row]=='nondom', trial_id - 1, trial_id))
# If both trials are already assigned, assign it as duplicate to
# current trial
} else{
trialcode2 <- c(trialcode2, trial_id)
}
}
} # End Step 2
# -- Step 3 - keep only first of duplicate responses --
# Format results from Step 2 as data frame
s2 <- cbind(data.frame(trial=trial), d[,colnames(d) %in% within_trial], trialcode2)
# Ensure trial column is named trial
colnames(d)[sapply(colnames(d), FUN=function(x) grepl('trial', x))] <- 'trial'
# Keep only non duplicate observations for within subject columns
coded_all <- s2 %>%
# Recode RTs assigned to previous trial to add 800 ms
mutate(new_rt = ifelse(trialcode2 == lag(trial) & trialcode2 != trial, .8+rt, rt),
# Identify duplicated trial assignments
dups = duplicated(trialcode2))
coded_responded <- coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
# Format columns
select(trialcode2, all_of(within_trial[within_trial != 'rt']), new_rt) %>%
rename(trial = trialcode2, rt = new_rt) %>%
mutate(trial = as.numeric(trial), rt = as.numeric(rt))
coded_timeouts <- coded_all %>%
# Keep all timeout trials whose trial ids are not in the set of responses
filter(trialcode2 == 'timeout', !trial %in% coded_responded$trial) %>%
select(-trialcode2, -new_rt, -dups)
# Extract all between subject information and merge it to response data
d <- d %>%
mutate(dups = duplicated(trial)) %>%
filter(!dups) %>%
# Need all within trial data plus condition from newly coded data
select(-all_of(within_trial), -condition, -dups) %>%
inner_join(coded_responded)
# Add between subject data on to timeout data and append
timeouts <- coded_timeouts[, colnames(coded_timeouts) %in% c('trial', within_trial)]
timeouts <- cbind(d[1,!colnames(d) %in% c(within_trial, 'trial')], timeouts)
timeouts <- timeouts[, colnames(d)]
20 %in% d$trial
nrow(d)
nrow(timeouts)
d <- rbind(d, timeouts)
d <- d[order(d$trial),]
tail(d)
d <- read.csv('sub-05_sess-2_task-GRADCPT_block-gonogo.csv')
d[715,]
# Check incoming data
stopifnot(is.data.frame(d))
# Get relevant data
temp <- get_columns(d)
trial <- temp$trial
condition <- temp$condition
coherence <- temp$coherence
rt <- temp$rt
within_trial <- c('transition_step', 'total_runtime_mins', 'frame_count', 'coherence', 'resp_key', 'rt')
# Separate out condition codes mapped on to trials
# Merge back in at the end
trial_condition <- d[, c('gradcpt_trial', 'condition')]
colnames(trial_condition)[1] <- 'trial'
trial_condition <- trial_condition[!duplicated(trial_condition$trial),]
if (! all(within_trial %in% colnames(d))) {
stop(paste0('The following columns need to be in the data: ', paste0(within_trial, collapse=', ')))
}
# Step 1 - Assign unambiguous responses
trialcode1 <- ifelse(rt == 0, 'timeout',
ifelse(coherence < unambig_low, lag(trial),
ifelse(coherence > unambig_high, trial, 'ambiguous')))
# Step 2 - Assign ambiguous responses
trialcode2 <- c()
for (row in 1:(length(rt))) {
# If current response assignment is unambiguous, leave it alone
if (trialcode1[row] != 'ambiguous') {
trialcode2 <- c(trialcode2, trialcode1[row])
# If current response assignment is ambiguous
} else if (trialcode1[row] == 'ambiguous') {
trial_id <- trial[row]
# Discern if the current and previous trials are already assigned a response
# To discern previous trial:
# If it's not the first iteration, look back to the
# last element in the currently created step 2 vector
if (length(trialcode2 > 2)) {
is_previous_response <- as.character(trial_id - 1) %in% trialcode2[row-1]
# Else, just look in the step 1 results
} else {
is_previous_response <- as.character(trial_id - 1) %in% trialcode1
}
# Discern whether current trial is assigned a response
is_current_response <- as.character(trial_id) %in% trialcode1
# If exactly one trial is assigned a response
if (xor(is_previous_response, is_current_response)) {
# Assign the current response to the trial that isn't already assigned
trialcode2 <- c(trialcode2, ifelse(is_previous_response, trial_id, trial_id-1))
# If neither current or previous trial is assigned a response
} else if (!is_previous_response & !is_current_response) {
# Assign it to the current trial only if current trial is not catch trial
trialcode2 <- c(trialcode2, ifelse(condition[row]=='nondom', trial_id - 1, trial_id))
# If both trials are already assigned, assign it as duplicate to
# current trial
} else{
trialcode2 <- c(trialcode2, trial_id)
}
}
} # End Step 2
# -- Step 3 - keep only first of duplicate responses --
# Format results from Step 2 as data frame
s2 <- cbind(data.frame(trial=trial), d[,colnames(d) %in% within_trial], trialcode2)
# Ensure trial column is named trial
colnames(d)[sapply(colnames(d), FUN=function(x) grepl('trial', x))] <- 'trial'
# Keep only non duplicate observations for within subject columns
coded_all <- s2 %>%
# Recode RTs assigned to previous trial to add 800 ms
mutate(new_rt = ifelse(trialcode2 == lag(trial) & trialcode2 != trial, .8+rt, rt),
# Identify duplicated trial assignments
dups = duplicated(trialcode2))
coded_responded <- coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
# Format columns
select(trialcode2, all_of(within_trial[within_trial != 'rt']), new_rt) %>%
rename(trial = trialcode2, rt = new_rt) %>%
mutate(trial = as.numeric(trial), rt = as.numeric(rt))
coded_timeouts <- coded_all %>%
# Keep all timeout trials whose trial ids are not in the set of responses
filter(trialcode2 == 'timeout', !trial %in% coded_responded$trial) %>%
select(-trialcode2, -new_rt, -dups)
# Extract all between subject information and merge it to response data
#d <- d %>%
d %>%
mutate(dups = duplicated(trial)) %>%
filter(trial == 715)
coded_responded[coded_responded$trial == 715,]
coded_all[coded_all$trial==715,]
d <- read.csv('sub-05_sess-2_task-GRADCPT_block-gonogo.csv')
# Check incoming data
stopifnot(is.data.frame(d))
# Get relevant data
temp <- get_columns(d)
trial <- temp$trial
condition <- temp$condition
coherence <- temp$coherence
rt <- temp$rt
within_trial <- c('transition_step', 'total_runtime_mins', 'frame_count', 'coherence', 'resp_key', 'rt')
# Separate out condition codes mapped on to trials
# Merge back in at the end
trial_condition <- d[, c('gradcpt_trial', 'condition')]
colnames(trial_condition)[1] <- 'trial'
trial_condition <- trial_condition[!duplicated(trial_condition$trial),]
if (! all(within_trial %in% colnames(d))) {
stop(paste0('The following columns need to be in the data: ', paste0(within_trial, collapse=', ')))
}
# Step 1 - Assign unambiguous responses
trialcode1 <- ifelse(rt == 0, 'timeout',
ifelse(coherence < unambig_low, lag(trial),
ifelse(coherence > unambig_high, trial, 'ambiguous')))
# Step 2 - Assign ambiguous responses
trialcode2 <- c()
for (row in 1:(length(rt))) {
# If current response assignment is unambiguous, leave it alone
if (trialcode1[row] != 'ambiguous') {
trialcode2 <- c(trialcode2, trialcode1[row])
# If current response assignment is ambiguous
} else if (trialcode1[row] == 'ambiguous') {
trial_id <- trial[row]
# Discern if the current and previous trials are already assigned a response
# To discern previous trial:
# If it's not the first iteration, look back to the
# last element in the currently created step 2 vector
if (length(trialcode2 > 2)) {
is_previous_response <- as.character(trial_id - 1) %in% trialcode2[row-1]
# Else, just look in the step 1 results
} else {
is_previous_response <- as.character(trial_id - 1) %in% trialcode1
}
# Discern whether current trial is assigned a response
is_current_response <- as.character(trial_id) %in% trialcode1
# If exactly one trial is assigned a response
if (xor(is_previous_response, is_current_response)) {
# Assign the current response to the trial that isn't already assigned
trialcode2 <- c(trialcode2, ifelse(is_previous_response, trial_id, trial_id-1))
# If neither current or previous trial is assigned a response
} else if (!is_previous_response & !is_current_response) {
# Assign it to the current trial only if current trial is not catch trial
trialcode2 <- c(trialcode2, ifelse(condition[row]=='nondom', trial_id - 1, trial_id))
# If both trials are already assigned, assign it as duplicate to
# current trial
} else{
trialcode2 <- c(trialcode2, trial_id)
}
}
} # End Step 2
# -- Step 3 - keep only first of duplicate responses --
# Format results from Step 2 as data frame
s2 <- cbind(data.frame(trial=trial), d[,colnames(d) %in% within_trial], trialcode2)
# Ensure trial column is named trial
colnames(d)[sapply(colnames(d), FUN=function(x) grepl('trial', x))] <- 'trial'
# Keep only non duplicate observations for within subject columns
coded_all <- s2 %>%
# Recode RTs assigned to previous trial to add 800 ms
mutate(new_rt = ifelse(trialcode2 == lag(trial) & trialcode2 != trial, .8+rt, rt),
# Identify duplicated trial assignments
dups = duplicated(trialcode2))
#coded_responded <- coded_all %>%
coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
filter(trial == 715)
#coded_responded <- coded_all %>%
coded_all %>%
filter(trialcode2 != 'timeout', !dups) %>%
# Format columns
select(trialcode2, all_of(within_trial[within_trial != 'rt']), new_rt) %>%
rename(trial = trialcode2, rt = new_rt) %>%
mutate(trial = as.numeric(trial), rt = as.numeric(rt)) %>%
filter(trial == 715)
d[d$trial > 700 & d$trial < 720,]
d[d$trial > 700 & d$trial < 720, c('trial', 'rt')]
grepl('gradcptpy', getwd())
basename(getwd())
file.path(getwd(), 'gradcptpy')
wd <- tolower(getwd())
wd
filepath(wd, 'gradcptpy')
file.path(wd, 'gradcptpy')
getwd()
setwd('../data')
file.path(wd, 'gradcptpy')
setwd(file.path(wd, 'gradcptpy'))
wd
help(file.path)
path_components <- strsplit(wd, '/')[[1]]
path_components
index <- which(path_components == 'gradcptpy')
index
new_wd <- file.path(path_components[1:index])
new_wd
setwd(new_wd)
do.call(file.path, as.list(path_components[1:index]))
new_wd <- do.call(file.path, as.list(path_components[1:index]))
new_wd
steps_back <- length(path_components) - index
new_wd <- rep('../', steps_back)
new_wd
q()
